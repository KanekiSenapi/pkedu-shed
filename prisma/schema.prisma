// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("TURSO_DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Custom fields
  microsoftId      String?   @unique
  notificationsEnabled Boolean @default(true)
  emailNotifications Boolean @default(true)

  subscriptions UserSubscription[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Schedule Models
model Schedule {
  id          String   @id @default(cuid())
  fileHash    String   @unique
  fileName    String?
  lastUpdated DateTime @default(now())

  sections    ScheduleSection[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScheduleSection {
  id         String   @id @default(cuid())
  scheduleId String

  kierunek   String
  stopien    String
  rok        Int
  semestr    Int
  tryb       String   // "stacjonarne" | "niestacjonarne"
  groups     String   // JSON array ["DS1", "DS2"]

  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  entries    ScheduleEntry[]

  createdAt  DateTime @default(now())

  @@index([kierunek, rok, semestr])
}

model ScheduleEntry {
  id        String   @id @default(cuid())
  sectionId String

  date      String   // ISO date string
  day       String   // "sobota", "niedziela", etc.
  time      String   // "8:00-10:30"
  startTime String   // "08:00"
  endTime   String   // "10:30"
  group     String   // "DS1", "DS2", etc.

  // Class info (stored as JSON for flexibility)
  subject    String
  type       String?  // "wyk≈Çad", "laboratorium", etc.
  instructor String?
  room       String?
  isRemote   Boolean  @default(false)
  rawContent String   // Original cell content

  section   ScheduleSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([date, group])
  @@index([sectionId])
}

// User Subscriptions
model UserSubscription {
  id        String   @id @default(cuid())
  userId    String

  // Filter criteria (JSON)
  kierunek  String?
  stopien   String?
  rok       Int?
  semestr   Int?
  tryb      String?
  groups    String?  // JSON array

  active    Boolean  @default(true)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// Notifications
model Notification {
  id         String   @id @default(cuid())
  userId     String

  type       String   // "schedule_update", "new_class", etc.
  title      String
  message    String

  read       Boolean  @default(false)

  // Optional: link to related schedule change
  scheduleHash String?

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@index([userId, read])
  @@index([createdAt])
}
